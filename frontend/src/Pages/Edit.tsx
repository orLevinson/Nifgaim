import { fieldsExample, exampleData } from "../fields";
import DataTable, { Direction } from "react-data-table-component";
import ExpandedTab from "../Components/Edit/ExpandedTab";
import { useCallback, useReducer, useState } from "react";
import useTable from "../Shared/Hooks/useTable";
import { Button, TextField } from "@mui/material";
import { dataType } from "../Shared/Types/Table";

const Edit = () => {
  const { columnsGenerator, reducer } = useTable();
  // the rows don't need a function to clean and format the data
  const [rows, dispatchRows] = useReducer(reducer, exampleData(fieldsExample));
  // the columns are being generated by a function - the columns state only stores the raw data from the backend
  const [columns, setColumns] = useState(fieldsExample);
  const [filter, setFilter] = useState("");

  const filteredData: () => dataType[] = useCallback(() => {
    if (filter === "") {
      return rows;
    }
    return rows.filter((row) => {
      const rowArr = Object.values(row);
      const check = rowArr.some((entry) =>
        (Array.isArray(entry) ? "" : entry).includes(filter)
      );
      return check ? true : false;
    });
  }, [rows, filter]);

  return (
    <div
      style={{ width: "90%", margin: "auto", marginTop: 30, marginBottom: 30 }}
    >
      <div
        style={{
          width: "100%",
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
        }}
      >
        <h1>טבלת נפגעים</h1>
        <div style={{ display: "flex", gap: "10px" }}>
          <TextField
            label="חיפוש"
            variant="filled"
            onChange={(e) => {
              setFilter(e.target.value);
            }}
          />
          <Button
            variant={"contained"}
            color={"success"}
            onClick={() => {
              dispatchRows({ type: "addRow" });
            }}
          >
            + הוספת רשומה
          </Button>
          <Button variant={"contained"}>ייצוא לCSV</Button>
        </div>
      </div>
      <DataTable
        columns={columnsGenerator(columns, dispatchRows)}
        data={filteredData()}
        direction={Direction.RTL}
        expandableRows
        highlightOnHover
        pagination
        pointerOnHover
        responsive
        subHeaderWrap
        expandableRowsComponent={({ data }) => {
          return (
            <ExpandedTab
              dispatchRows={dispatchRows}
              columns={columns}
              data={data}
              rowId={data.id as string}
            />
          );
        }}
        expandOnRowClicked
        expandOnRowDoubleClicked
      />
    </div>
  );
};

export default Edit;
